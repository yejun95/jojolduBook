name: Java CI with Gradle

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# AWS 관련 값 변수로 설정
env:
  AWS_S3_BUCKET: freelec-springboot-github-build
  AWS_CODE_DEPLOY_APPLICATION: freelec-springboot2-webservice
  AWS_CODE_DEPLOY_GROUP: freelec-springboot2-webservice-group

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    # 권한 부여
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      run: ./gradlew clean build

    # 실제 필요한 파일만 압축
    - name: Generate deployment package
      run: |
        mkdir -p before-deploy # zip에 포함시킬 파일들을 담을 디렉터리 생성
        cp scripts/*.sh before-deploy/
        cp appspec.yml before-deploy/
        cp build/libs/*.jar before-deploy/
        cd before-deploy && zip -r before-deploy *
        cd ../ && mkdir -p deploy
        mv before-deploy/before-deploy.zip deploy/$AWS_CODE_DEPLOY_APPLICATION.zip
      shell: bash

    # AWS 권한 확인
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # S3 버킷에 빌드파일(zip 파일)을 업로드
    - name: Upload to S3
      run: aws s3 cp --region ${{ secrets.AWS_REGION }} ./deploy/$AWS_CODE_DEPLOY_APPLICATION.zip s3://$AWS_S3_BUCKET/$AWS_CODE_DEPLOY_APPLICATION.zip

    # EC2 인스턴스에 S3에 저장되어 있던 zip 파일을 받아와 배포 시작
    - name: Code Deploy
      run: aws deploy create-deployment 
          --application-name ${{ env.AWS_CODE_DEPLOY_APPLICATION }} 
          --deployment-config-name CodeDeployDefault.AllAtOnce 
          --deployment-group-name ${{ env.AWS_CODE_DEPLOY_GROUP }} 
          --s3-location bucket=$AWS_S3_BUCKET,key=$AWS_CODE_DEPLOY_APPLICATION.zip,bundleType=zip
